def gcd(a: int, b: int) -> int:
    """
    Calculate the greatest common divisor (GCD) of two integers a and b
    using the Euclidean algorithm.
    """
    # Implement your solution here
    
    # if either one is not a number then there is no gcd
    if not isinstance(a,int) or not isinstance(b,int):
        print("One or both of these arent numbers")
        return None
    
    # gcd if a and b is 0 would be 0 
    if a == 0 and b == 0:
        print("GCD is 0")
        return None
    
    # make both positive
    a = abs(a)
    b = abs(b)

    # base case
    if a == 0:
        return b
    if b == 0:
        return a
    
    # recursive case subtracts the smaller number from the larger
    if a>b:
        return gcd(a-b,b)
    else:
        return gcd(a,b-a)


testCases = [

    #Test Cases generated by AI, order is (a,b, expected return)
        
        # Prime numbers
        (17, 29, 1),   # Two distinct primes
        (13, 13, 13),  # Same prime number
        (101, 103, 1), # Large distinct primes

        # Negative numbers
        (-8, 12, 4),   # One negative number
        (-36, -24, 12), # Both negative numbers
        (-7, 21, 7),   # Prime and multiple

        # Cases involving zero
        (0, 0, None),  # GCD(0,0) is undefined
        (0, 10, 10),   # GCD(x,0) = |x|
        (25, 0, 25),   # GCD(x,0) = |x|

        # Mixed cases
        (-48, 18, 6),  # Mixed negative and positive numbers
        (81, -9, 9),   # Mixed negative divisor

        # Invalid inputs
        (None, 5, None), # None as input
        ("a", 3, None),  # Non-integer input
        (5.5, 2, None),  # Float input
    ]

for a, b, expected in testCases:
    x = gcd(a,b)
    if x == expected:
        print(f"{x} is Correct")
    else:
        print(f"{x} is not the correct answer")
# After running the code we see that everything works